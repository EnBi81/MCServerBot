{
  "openapi": "3.0.1",
  "info": {
    "title": "MCWebAPI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    "version": "1.0"
  },
  "paths": {
    "/Auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Generates a Bearer token and returns it.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a APIModel.Responses.AuthenticatedResponse object with the token included.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the authentication fails.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionDTO"
                }
              }
            }
          }
        }
      }
    },
    "/Discord/token/{id}": {
      "get": {
        "tags": [
          "Discord"
        ],
        "summary": "Gets the user token for by a Discord Id. (Auth policies: DiscordBot)",
        "operationId": "GetWebAccessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Discord Id of the user.",
            "required": true,
            "schema": {
              "pattern": "\\d{18}",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a APIModel.Responses.UserTokenResponse object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "If the user does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Bearer": [
              "DiscordBot"
            ]
          }
        ]
      }
    },
    "/Discord/user": {
      "post": {
        "tags": [
          "Discord"
        ],
        "summary": "Register a discord user to the system. (Auth policies: DiscordBot)",
        "operationId": "RegisterUser",
        "requestBody": {
          "description": "Registered user data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns Ok 200."
          },
          "400": {
            "description": "If the DiscordName or the ProfilePic is null.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Bearer": [
              "DiscordBot"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Discord"
        ],
        "summary": "Refreshes a user's data. (Auth policies: DiscordBot)",
        "operationId": "RefreshUser",
        "requestBody": {
          "description": "Data of the user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDataDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns Ok 200."
          },
          "400": {
            "description": "If the DiscordName or the ProfilePic is null, or the user is not registered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Bearer": [
              "DiscordBot"
            ]
          }
        ]
      }
    },
    "/MinecraftServer/{id}": {
      "get": {
        "tags": [
          "MinecraftServer"
        ],
        "summary": "Gets the informations of a server. (Auth)",
        "operationId": "GetServer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the server.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested server object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinecraftServerDTO"
                }
              }
            }
          },
          "400": {
            "description": "The server with the specified id does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "MinecraftServer"
        ],
        "summary": "Deletes a server from the system. (Auth)",
        "operationId": "DeleteServer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the server",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The server is deleted. Nothing more."
          },
          "400": {
            "description": "The server with the specified id does not exist or an exception happened during the deletion.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "MinecraftServer"
        ],
        "summary": "Modifies the server information. (Auth)",
        "operationId": "ModifyServer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the server to modify",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "new values",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyServerDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The server is deleted. Nothing more."
          },
          "400": {
            "description": "The server with the specified id does not exist or an exception happened during the deletion.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/MinecraftServer/{id}/commands": {
      "post": {
        "tags": [
          "MinecraftServer"
        ],
        "summary": "Writes a command to the server. (Auth)",
        "operationId": "WriteCommandToServer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the minecraft server",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "command data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The command is executed."
          },
          "400": {
            "description": "The server with the specified id does not exist or an exception happened during the command execution.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/MinecraftServer/{id}/toggle": {
      "post": {
        "tags": [
          "MinecraftServer"
        ],
        "summary": "Toggles the minecraft server on and off. (Auth)",
        "operationId": "ToggleServer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the minecraft server.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The server is either started or deleted, depending on the state of it."
          },
          "400": {
            "description": "The server with the specified id does not exist or an exception happened during the toggle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/Permission/{id}/grant": {
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Grants permission to a user. Note: the user must have been registered before. (Auth)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "pattern": "\\d{18}",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the request got successfully handled."
          },
          "400": {
            "description": "An exception has been occured during the process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/Permission/{id}/revoke": {
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Revokes permission from a user. Note: the user must have been registered before. (Auth)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "pattern": "\\d{18}",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the request got successfully handled."
          },
          "400": {
            "description": "An exception has been occured during the process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/ServerPark": {
      "get": {
        "tags": [
          "ServerPark"
        ],
        "summary": "Gets all the minecraft servers from the system. (Auth)",
        "operationId": "GetAllServers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MinecraftServerDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "ServerPark"
        ],
        "summary": "Creates a server. (Auth)",
        "operationId": "CreateServer",
        "requestBody": {
          "description": "data which are required to create the server",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServerCreationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinecraftServerDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/ServerPark/running": {
      "get": {
        "tags": [
          "ServerPark"
        ],
        "summary": "Gets the currently running server (Auth)",
        "operationId": "GetRunningServer",
        "responses": {
          "302": {
            "description": "Redirects to the minecraft server api endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinecraftServerDTO"
                }
              }
            }
          },
          "400": {
            "description": "If there is no running server currently.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AuthenticatedResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommandDto": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExceptionDTO": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogMessageDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "messageType": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          },
          "platform": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MinecraftPlayerDTO": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "onlineFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "pastOnline": {
            "$ref": "#/components/schemas/TimeSpan"
          }
        },
        "additionalProperties": false
      },
      "MinecraftServerDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "serverName": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "logMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogMessageDto"
            },
            "nullable": true
          },
          "onlineFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinecraftPlayerDTO"
            },
            "nullable": true
          },
          "storageBytes": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "ModifyServerDto": {
        "type": "object",
        "properties": {
          "newName": {
            "maxLength": 35,
            "minLength": 4,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServerCreationDto": {
        "required": [
          "newName"
        ],
        "type": "object",
        "properties": {
          "newName": {
            "maxLength": 35,
            "minLength": 4,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TimeSpan": {
        "type": "object",
        "properties": {
          "ticks": {
            "type": "integer",
            "format": "int64"
          },
          "days": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "hours": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "milliseconds": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "minutes": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "seconds": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMilliseconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMinutes": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalSeconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserDataDto": {
        "required": [
          "discordName",
          "id",
          "profilePic"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "discordName": {
            "minLength": 1,
            "type": "string"
          },
          "profilePic": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UserTokenResponse": {
        "type": "object",
        "properties": {
          "userToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Standard Authorization header using the Bearer scheme (JWT). Example: \"bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}